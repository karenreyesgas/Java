# created on: 18-Mar-2010
# author : Mei Yii Lim

# The first phase involves comparing event pair - 2 events at a time. The maximum number 
# of matches is extracted and any event pair with less than the maximum number of matches will 
# be retracted. The remaining event pairs are then compared to see if they have the
# exact same matching values, if yes, a common event structure is formed. A set of common 
# structures is return as a result of the query
 
package FAtiMA.advancedMemoryComponent; 

#list any import classes here.

import FAtiMA.Core.memory.episodicMemory.ActionDetail;
#declare any global variables here

rule "create pair"
	no-loop true
	salience 100
	when
		$q: CommonQuery()
		$ad1: ActionDetail($id1 : ID) 
		$ad2: ActionDetail($id2 : ID > $id1)
		not ( exists EventPair(actionDetail == $ad1, ID2 == $id2))
	then			
		insert (new EventPair($ad1, $id2));
		System.out.println("create pair " + $id1 + " " + $id2);
end

rule "match subject"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "subject")
		$ad1: ActionDetail($s1 : subject != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, subject == $s1)
	then			
		modify ($ep)
		{
			setExtension("subject"),
			setMatchingValues("subject", $s1)
		}
		System.out.println("match subject " + $ad1.getID() + " " + $id2);		
end

rule "match target"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "target")
		$ad1: ActionDetail($t1 : target != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, target == $t1)
	then			
		modify ($ep)
		{
			setExtension("target"),
			setMatchingValues("target", $t1)
		}
		System.out.println("match target " + $ad1.getID() + " " + $id2);		
end

rule "match action"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "action")
		$ad1: ActionDetail($a1 : action != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, action == $a1)
	then			
		modify ($ep)
		{
			setExtension("action"),
			setMatchingValues("action", $a1)
		}
		System.out.println("match action " + $ad1.getID() + " " + $id2);		
end

rule "match intention"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "intention")
		$ad1: ActionDetail($i1 : intention != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, intention == $i1)
	then			
		modify ($ep)
		{
			setExtension("intention"),
			setMatchingValues("intention", $i1)
		}
		System.out.println("match intention " + $ad1.getID() + " " + $id2);		
end

rule "match status"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "status")
		$ad1: ActionDetail($st1 : status != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, status == $st1)
	then			
		modify ($ep)
		{
			setExtension("status"),
			setMatchingValues("status", $st1)
		}
		System.out.println("match status " + $ad1.getID() + " " + $id2);		
end

rule "match speechActMeaning"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "speechActMeaning")
		$ad1: ActionDetail($sa1 : speechActMeaning != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, speechActMeaning == $sa1)
	then			
		modify ($ep)
		{
			setExtension("speechActMeaning"),
			setMatchingValues("speechActMeaning", $sa1)
		}
		System.out.println("match speechActMeaning " + $ad1.getID() + " " + $id2);		
end

rule "match multimediaPath"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "multimediaPath")
		$ad1: ActionDetail($m1 : multimediaPath != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, multimediaPath == $m1)
	then			
		modify ($ep)
		{
			setExtension("multimediaPath"),
			setMatchingValues("multimediaPath", $m1)
		}
		System.out.println("match multimediaPath " + $ad1.getID() + " " + $id2);		
end

rule "match object"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "object")
		$ad1: ActionDetail($o1 : object != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, object == $o1)
	then			
		modify ($ep)
		{
			setExtension("object"),
			setMatchingValues("object", $o1)
		}
		System.out.println("match object " + $ad1.getID() + " " + $id2);		
end

rule "match location"
	no-loop true
	salience 75
	when
		$ep: EventPair($id2 : ID2, extension not contains "location")
		$ad1: ActionDetail($l1 : location != null) from $ep.actionDetail
		$ad2: ActionDetail(ID == $id2, location == $l1)
	then			
		modify ($ep)
		{
			setExtension("location"),
			setMatchingValues("location", $l1)
		}
		System.out.println("match location " + $ad1.getID() + " " + $id2);		
end

rule "retract actionDetail"
	no-loop true
	salience 50
	when 
		$ad: ActionDetail()
	then
		retract($ad);
end

rule "max match" 
	no-loop true
	salience 25
	when 
		$q: CommonQuery($m : maxNumMatch)
		$ep: EventPair($n : numMatch > $m)
	then
		modify ($q)
		{
			setMaxNumMatch($n)
		}
end

rule "not max match" 
	no-loop true
	salience 25
	when 
		$q: CommonQuery($m : maxNumMatch)
		$ep: EventPair($n : numMatch < $m)
	then
		retract ($ep);
end

rule "set match" 
	no-loop true
	salience 15
	when 
		$ep: EventPair($ad1 : actionDetail, $id2 : ID2, $mv : matchingValues)
	then
		insert (new CommonEvents($ad1.getID(), $id2, $mv));
		System.out.println("set match " + $ad1.getID() + " " + $id2 + " " + $mv);
		retract ($ep);
end

rule "group match"
	no-loop true
	salience 15
	when 
		$ce1: CommonEvents($ids1: IDs, $mv1 : matchingValues)
		$ce2: CommonEvents($ids2: IDs != $ids1, $mv2 : matchingValues == $mv1)
	then
		modify ($ce1)
		{
			setIDs($ids2)
		}
		System.out.println("group match " + $ids1 + " " + $mv1);	
		retract($ce2);
end

rule "end match" 
	no-loop true
	when 
		$q: CommonQuery()
		$ce: CommonEvents($ids: IDs, $mv : matchingValues)
	then
		modify ($q)
		{
			setMatch($ids, $mv)
		}
		System.out.println("end match " + $ids + " " + $mv);	
		retract ($ce);
end